
mpmc_lab3_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002684  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b0  080027b0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080027b0  080027b0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b0  080027b0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080027b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000018  080027d0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080027d0  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009771  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba4  00000000  00000000  000297b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c2b  00000000  00000000  0002c720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba2e  00000000  00000000  0004334b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823c1  00000000  00000000  0004ed79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d113a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002924  00000000  00000000  000d1190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002778 	.word	0x08002778

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002778 	.word	0x08002778

0800014c <read_button_pin>:
static GPIO_PinState btn_state_curr_buf[NUM_OF_BUTTONS];
static bool b_flag_btn_pressed_1s_buf[NUM_OF_BUTTONS];
static uint16_t counter_btn_pressed_1s_buf[NUM_OF_BUTTONS];

static GPIO_PinState read_button_pin(button_t btn)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if (btn == BUTTON_1) return HAL_GPIO_ReadPin(BTN_0_GPIO_Port, BTN_0_Pin);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d105      	bne.n	8000168 <read_button_pin+0x1c>
 800015c:	2180      	movs	r1, #128	; 0x80
 800015e:	480f      	ldr	r0, [pc, #60]	; (800019c <read_button_pin+0x50>)
 8000160:	f001 faca 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000164:	4603      	mov	r3, r0
 8000166:	e014      	b.n	8000192 <read_button_pin+0x46>
	else if (btn == BUTTON_2) return HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	2b01      	cmp	r3, #1
 800016c:	d106      	bne.n	800017c <read_button_pin+0x30>
 800016e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000172:	480a      	ldr	r0, [pc, #40]	; (800019c <read_button_pin+0x50>)
 8000174:	f001 fac0 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000178:	4603      	mov	r3, r0
 800017a:	e00a      	b.n	8000192 <read_button_pin+0x46>
	else if (btn == BUTTON_3) return HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin);
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	2b02      	cmp	r3, #2
 8000180:	d106      	bne.n	8000190 <read_button_pin+0x44>
 8000182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000186:	4805      	ldr	r0, [pc, #20]	; (800019c <read_button_pin+0x50>)
 8000188:	f001 fab6 	bl	80016f8 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	e000      	b.n	8000192 <read_button_pin+0x46>

	return RELEASED;
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010c00 	.word	0x40010c00

080001a0 <button_reading>:

void button_reading(void)
{
 80001a0:	b590      	push	{r4, r7, lr}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
	for (button_t btn = BUTTON_1; btn < NUM_OF_BUTTONS; btn++)
 80001a6:	2300      	movs	r3, #0
 80001a8:	71fb      	strb	r3, [r7, #7]
 80001aa:	e042      	b.n	8000232 <button_reading+0x92>
	{
		btn_state_prev_buf[btn] = btn_state_curr_buf[btn];
 80001ac:	79fa      	ldrb	r2, [r7, #7]
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	4924      	ldr	r1, [pc, #144]	; (8000244 <button_reading+0xa4>)
 80001b2:	5c89      	ldrb	r1, [r1, r2]
 80001b4:	4a24      	ldr	r2, [pc, #144]	; (8000248 <button_reading+0xa8>)
 80001b6:	54d1      	strb	r1, [r2, r3]
		btn_state_curr_buf[btn] = read_button_pin(btn);
 80001b8:	79fc      	ldrb	r4, [r7, #7]
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	4618      	mov	r0, r3
 80001be:	f7ff ffc5 	bl	800014c <read_button_pin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <button_reading+0xa4>)
 80001c8:	551a      	strb	r2, [r3, r4]
		if (btn_state_curr_buf[btn] == btn_state_prev_buf[btn])
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	4a1d      	ldr	r2, [pc, #116]	; (8000244 <button_reading+0xa4>)
 80001ce:	5cd2      	ldrb	r2, [r2, r3]
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	491d      	ldr	r1, [pc, #116]	; (8000248 <button_reading+0xa8>)
 80001d4:	5ccb      	ldrb	r3, [r1, r3]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	d128      	bne.n	800022c <button_reading+0x8c>
		{
			btn_debounced_buf[btn] = btn_state_curr_buf[btn];
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	4919      	ldr	r1, [pc, #100]	; (8000244 <button_reading+0xa4>)
 80001e0:	5c89      	ldrb	r1, [r1, r2]
 80001e2:	4a1a      	ldr	r2, [pc, #104]	; (800024c <button_reading+0xac>)
 80001e4:	54d1      	strb	r1, [r2, r3]
			if (btn_debounced_buf[btn] == PRESSED)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	4a18      	ldr	r2, [pc, #96]	; (800024c <button_reading+0xac>)
 80001ea:	5cd3      	ldrb	r3, [r2, r3]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d114      	bne.n	800021a <button_reading+0x7a>
			{
				if (counter_btn_pressed_1s_buf[btn] < DURATION_BUTTON_PRESSED_1S)
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	4a17      	ldr	r2, [pc, #92]	; (8000250 <button_reading+0xb0>)
 80001f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001f8:	2b63      	cmp	r3, #99	; 0x63
 80001fa:	d809      	bhi.n	8000210 <button_reading+0x70>
				{
					counter_btn_pressed_1s_buf[btn]++;
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	4a14      	ldr	r2, [pc, #80]	; (8000250 <button_reading+0xb0>)
 8000200:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000204:	3201      	adds	r2, #1
 8000206:	b291      	uxth	r1, r2
 8000208:	4a11      	ldr	r2, [pc, #68]	; (8000250 <button_reading+0xb0>)
 800020a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800020e:	e00d      	b.n	800022c <button_reading+0x8c>
				}
				else
				{
					b_flag_btn_pressed_1s_buf[btn] = true;
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	4a10      	ldr	r2, [pc, #64]	; (8000254 <button_reading+0xb4>)
 8000214:	2101      	movs	r1, #1
 8000216:	54d1      	strb	r1, [r2, r3]
 8000218:	e008      	b.n	800022c <button_reading+0x8c>
				}
			}
			else
			{
				counter_btn_pressed_1s_buf[btn] = 0;
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4a0c      	ldr	r2, [pc, #48]	; (8000250 <button_reading+0xb0>)
 800021e:	2100      	movs	r1, #0
 8000220:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				b_flag_btn_pressed_1s_buf[btn] = false;
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	4a0b      	ldr	r2, [pc, #44]	; (8000254 <button_reading+0xb4>)
 8000228:	2100      	movs	r1, #0
 800022a:	54d1      	strb	r1, [r2, r3]
	for (button_t btn = BUTTON_1; btn < NUM_OF_BUTTONS; btn++)
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	3301      	adds	r3, #1
 8000230:	71fb      	strb	r3, [r7, #7]
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b02      	cmp	r3, #2
 8000236:	d9b9      	bls.n	80001ac <button_reading+0xc>
			}
		}
	}
}
 8000238:	bf00      	nop
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bd90      	pop	{r4, r7, pc}
 8000242:	bf00      	nop
 8000244:	2000003c 	.word	0x2000003c
 8000248:	20000038 	.word	0x20000038
 800024c:	20000034 	.word	0x20000034
 8000250:	20000044 	.word	0x20000044
 8000254:	20000040 	.word	0x20000040

08000258 <is_button_pressed>:

bool is_button_pressed(button_t btn)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
	if (btn >= NUM_OF_BUTTONS) return false;
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	2b02      	cmp	r3, #2
 8000266:	d901      	bls.n	800026c <is_button_pressed+0x14>
 8000268:	2300      	movs	r3, #0
 800026a:	e007      	b.n	800027c <is_button_pressed+0x24>
	return (btn_debounced_buf[btn] == PRESSED);
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <is_button_pressed+0x30>)
 8000270:	5cd3      	ldrb	r3, [r2, r3]
 8000272:	2b01      	cmp	r3, #1
 8000274:	bf0c      	ite	eq
 8000276:	2301      	moveq	r3, #1
 8000278:	2300      	movne	r3, #0
 800027a:	b2db      	uxtb	r3, r3
}
 800027c:	4618      	mov	r0, r3
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	20000034 	.word	0x20000034

0800028c <is_button_pressed_1s>:

bool is_button_pressed_1s(button_t btn)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	if (btn >= NUM_OF_BUTTONS) return false;
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d901      	bls.n	80002a0 <is_button_pressed_1s+0x14>
 800029c:	2300      	movs	r3, #0
 800029e:	e002      	b.n	80002a6 <is_button_pressed_1s+0x1a>
	return b_flag_btn_pressed_1s_buf[btn];
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	4a03      	ldr	r2, [pc, #12]	; (80002b0 <is_button_pressed_1s+0x24>)
 80002a4:	5cd3      	ldrb	r3, [r2, r3]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	20000040 	.word	0x20000040

080002b4 <event_btn_1>:
static btn_event_t btn_event_buf[NUM_OF_BUTTONS];
extern bool b_flag_buf[NUM_OF_TIMERS];
extern mode_t mode;

void event_btn_1(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	switch (btn_event_buf[BUTTON_1])
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <event_btn_1+0x6c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d002      	beq.n	80002c6 <event_btn_1+0x12>
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d01a      	beq.n	80002fa <event_btn_1+0x46>
				btn_event_buf[BUTTON_1] = BTN_RELEASED;
			}
		}
		break;
		default:
		break;
 80002c4:	e029      	b.n	800031a <event_btn_1+0x66>
			if (is_button_pressed(BUTTON_1))
 80002c6:	2000      	movs	r0, #0
 80002c8:	f7ff ffc6 	bl	8000258 <is_button_pressed>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d020      	beq.n	8000314 <event_btn_1+0x60>
				turn_all_off();
 80002d2:	f000 fcff 	bl	8000cd4 <turn_all_off>
				mode = (mode >= NUM_OF_MODES-1) ? MODE_1_NORMAL : mode+1;
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <event_btn_1+0x70>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d804      	bhi.n	80002e8 <event_btn_1+0x34>
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <event_btn_1+0x70>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	3301      	adds	r3, #1
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	e000      	b.n	80002ea <event_btn_1+0x36>
 80002e8:	2300      	movs	r3, #0
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <event_btn_1+0x70>)
 80002ec:	7013      	strb	r3, [r2, #0]
				begin_mode();
 80002ee:	f000 fa91 	bl	8000814 <begin_mode>
				btn_event_buf[BUTTON_1] = BTN_PRESSED;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <event_btn_1+0x6c>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]
		break;
 80002f8:	e00c      	b.n	8000314 <event_btn_1+0x60>
			if(!is_button_pressed(BUTTON_1))
 80002fa:	2000      	movs	r0, #0
 80002fc:	f7ff ffac 	bl	8000258 <is_button_pressed>
 8000300:	4603      	mov	r3, r0
 8000302:	f083 0301 	eor.w	r3, r3, #1
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d005      	beq.n	8000318 <event_btn_1+0x64>
				btn_event_buf[BUTTON_1] = BTN_RELEASED;
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <event_btn_1+0x6c>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
		break;
 8000312:	e001      	b.n	8000318 <event_btn_1+0x64>
		break;
 8000314:	bf00      	nop
 8000316:	e000      	b.n	800031a <event_btn_1+0x66>
		break;
 8000318:	bf00      	nop
	}
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	2000004c 	.word	0x2000004c
 8000324:	20000076 	.word	0x20000076

08000328 <event_btn_2>:

void event_btn_2(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	switch (btn_event_buf[BUTTON_2])
 800032c:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <event_btn_2+0xac>)
 800032e:	785b      	ldrb	r3, [r3, #1]
 8000330:	2b02      	cmp	r3, #2
 8000332:	d02d      	beq.n	8000390 <event_btn_2+0x68>
 8000334:	2b02      	cmp	r3, #2
 8000336:	dc43      	bgt.n	80003c0 <event_btn_2+0x98>
 8000338:	2b00      	cmp	r3, #0
 800033a:	d002      	beq.n	8000342 <event_btn_2+0x1a>
 800033c:	2b01      	cmp	r3, #1
 800033e:	d00c      	beq.n	800035a <event_btn_2+0x32>
				}
			}
		}
		break;
		default:
		break;
 8000340:	e03e      	b.n	80003c0 <event_btn_2+0x98>
			if (is_button_pressed(BUTTON_2))
 8000342:	2001      	movs	r0, #1
 8000344:	f7ff ff88 	bl	8000258 <is_button_pressed>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d03a      	beq.n	80003c4 <event_btn_2+0x9c>
				increase_duration_value();
 800034e:	f000 fab5 	bl	80008bc <increase_duration_value>
				btn_event_buf[BUTTON_2] = BTN_PRESSED;
 8000352:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <event_btn_2+0xac>)
 8000354:	2201      	movs	r2, #1
 8000356:	705a      	strb	r2, [r3, #1]
		break;
 8000358:	e034      	b.n	80003c4 <event_btn_2+0x9c>
			if (!is_button_pressed(BUTTON_2))
 800035a:	2001      	movs	r0, #1
 800035c:	f7ff ff7c 	bl	8000258 <is_button_pressed>
 8000360:	4603      	mov	r3, r0
 8000362:	f083 0301 	eor.w	r3, r3, #1
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2b00      	cmp	r3, #0
 800036a:	d003      	beq.n	8000374 <event_btn_2+0x4c>
				btn_event_buf[BUTTON_2] = BTN_RELEASED;
 800036c:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <event_btn_2+0xac>)
 800036e:	2200      	movs	r2, #0
 8000370:	705a      	strb	r2, [r3, #1]
		break;
 8000372:	e029      	b.n	80003c8 <event_btn_2+0xa0>
			else if (is_button_pressed_1s(BUTTON_2))
 8000374:	2001      	movs	r0, #1
 8000376:	f7ff ff89 	bl	800028c <is_button_pressed_1s>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d023      	beq.n	80003c8 <event_btn_2+0xa0>
				set_timer(TMR_AUTO_INCREASING_DURATION, TIMER_AUTO_INCREASING_DURATION);
 8000380:	21fa      	movs	r1, #250	; 0xfa
 8000382:	2003      	movs	r0, #3
 8000384:	f000 fe40 	bl	8001008 <set_timer>
				btn_event_buf[BUTTON_2] = BTN_PRESSED_MORE_THAN_1S;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <event_btn_2+0xac>)
 800038a:	2202      	movs	r2, #2
 800038c:	705a      	strb	r2, [r3, #1]
		break;
 800038e:	e01b      	b.n	80003c8 <event_btn_2+0xa0>
			if (!is_button_pressed(BUTTON_2))
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff ff61 	bl	8000258 <is_button_pressed>
 8000396:	4603      	mov	r3, r0
 8000398:	f083 0301 	eor.w	r3, r3, #1
 800039c:	b2db      	uxtb	r3, r3
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d003      	beq.n	80003aa <event_btn_2+0x82>
				btn_event_buf[BUTTON_2] = BTN_RELEASED;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <event_btn_2+0xac>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	705a      	strb	r2, [r3, #1]
		break;
 80003a8:	e010      	b.n	80003cc <event_btn_2+0xa4>
				if (b_flag_buf[TMR_AUTO_INCREASING_DURATION])
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <event_btn_2+0xb0>)
 80003ac:	78db      	ldrb	r3, [r3, #3]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d00c      	beq.n	80003cc <event_btn_2+0xa4>
					increase_duration_value();
 80003b2:	f000 fa83 	bl	80008bc <increase_duration_value>
					set_timer(TMR_AUTO_INCREASING_DURATION, TIMER_AUTO_INCREASING_DURATION);
 80003b6:	21fa      	movs	r1, #250	; 0xfa
 80003b8:	2003      	movs	r0, #3
 80003ba:	f000 fe25 	bl	8001008 <set_timer>
		break;
 80003be:	e005      	b.n	80003cc <event_btn_2+0xa4>
		break;
 80003c0:	bf00      	nop
 80003c2:	e004      	b.n	80003ce <event_btn_2+0xa6>
		break;
 80003c4:	bf00      	nop
 80003c6:	e002      	b.n	80003ce <event_btn_2+0xa6>
		break;
 80003c8:	bf00      	nop
 80003ca:	e000      	b.n	80003ce <event_btn_2+0xa6>
		break;
 80003cc:	bf00      	nop
	}
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000004c 	.word	0x2000004c
 80003d8:	200000c0 	.word	0x200000c0

080003dc <event_btn_3>:

void event_btn_3(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	switch (btn_event_buf[BUTTON_3])
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <event_btn_3+0x50>)
 80003e2:	789b      	ldrb	r3, [r3, #2]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d002      	beq.n	80003ee <event_btn_3+0x12>
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d00c      	beq.n	8000406 <event_btn_3+0x2a>
				btn_event_buf[BUTTON_3] = BTN_RELEASED;
			}
		}
		break;
		default:
		break;
 80003ec:	e01b      	b.n	8000426 <event_btn_3+0x4a>
			if (is_button_pressed(BUTTON_3))
 80003ee:	2002      	movs	r0, #2
 80003f0:	f7ff ff32 	bl	8000258 <is_button_pressed>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d012      	beq.n	8000420 <event_btn_3+0x44>
				save_selected_duration_value();
 80003fa:	f000 fa9b 	bl	8000934 <save_selected_duration_value>
				btn_event_buf[BUTTON_3] = BTN_PRESSED;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <event_btn_3+0x50>)
 8000400:	2201      	movs	r2, #1
 8000402:	709a      	strb	r2, [r3, #2]
		break;
 8000404:	e00c      	b.n	8000420 <event_btn_3+0x44>
			if(!is_button_pressed(BUTTON_3))
 8000406:	2002      	movs	r0, #2
 8000408:	f7ff ff26 	bl	8000258 <is_button_pressed>
 800040c:	4603      	mov	r3, r0
 800040e:	f083 0301 	eor.w	r3, r3, #1
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d005      	beq.n	8000424 <event_btn_3+0x48>
				btn_event_buf[BUTTON_3] = BTN_RELEASED;
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <event_btn_3+0x50>)
 800041a:	2200      	movs	r2, #0
 800041c:	709a      	strb	r2, [r3, #2]
		break;
 800041e:	e001      	b.n	8000424 <event_btn_3+0x48>
		break;
 8000420:	bf00      	nop
 8000422:	e000      	b.n	8000426 <event_btn_3+0x4a>
		break;
 8000424:	bf00      	nop
	}
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	2000004c 	.word	0x2000004c

08000430 <traffic_light>:
static uint8_t tmp[2];
extern bool b_flag_buf[NUM_OF_TIMERS];
mode_t mode;

static void traffic_light(uint8_t index)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
	if (index >= 2) return;
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b01      	cmp	r3, #1
 800043e:	f200 8126 	bhi.w	800068e <traffic_light+0x25e>
	switch (traffic_light_state[index])
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	4a9b      	ldr	r2, [pc, #620]	; (80006b4 <traffic_light+0x284>)
 8000446:	5cd3      	ldrb	r3, [r2, r3]
 8000448:	2b05      	cmp	r3, #5
 800044a:	f200 8122 	bhi.w	8000692 <traffic_light+0x262>
 800044e:	a201      	add	r2, pc, #4	; (adr r2, 8000454 <traffic_light+0x24>)
 8000450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000454:	0800046d 	.word	0x0800046d
 8000458:	080004c9 	.word	0x080004c9
 800045c:	08000525 	.word	0x08000525
 8000460:	08000581 	.word	0x08000581
 8000464:	080005db 	.word	0x080005db
 8000468:	08000635 	.word	0x08000635
	{
		case RED_1:
		{
			turn_on(RED_1);
 800046c:	2000      	movs	r0, #0
 800046e:	f000 fb99 	bl	8000ba4 <turn_on>
			duration_buf[index] = selected_duration_buf[0] - tmp[index];
 8000472:	4b91      	ldr	r3, [pc, #580]	; (80006b8 <traffic_light+0x288>)
 8000474:	7819      	ldrb	r1, [r3, #0]
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	4a90      	ldr	r2, [pc, #576]	; (80006bc <traffic_light+0x28c>)
 800047a:	5cd2      	ldrb	r2, [r2, r3]
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	1a8a      	subs	r2, r1, r2
 8000480:	b2d1      	uxtb	r1, r2
 8000482:	4a8f      	ldr	r2, [pc, #572]	; (80006c0 <traffic_light+0x290>)
 8000484:	54d1      	strb	r1, [r2, r3]
			if (b_flag_buf[TMR_TRAFFIC_LIGHT_1])
 8000486:	4b8f      	ldr	r3, [pc, #572]	; (80006c4 <traffic_light+0x294>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	f000 8103 	beq.w	8000696 <traffic_light+0x266>
			{
				tmp[index]++;
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	4a8a      	ldr	r2, [pc, #552]	; (80006bc <traffic_light+0x28c>)
 8000494:	5cd2      	ldrb	r2, [r2, r3]
 8000496:	3201      	adds	r2, #1
 8000498:	b2d1      	uxtb	r1, r2
 800049a:	4a88      	ldr	r2, [pc, #544]	; (80006bc <traffic_light+0x28c>)
 800049c:	54d1      	strb	r1, [r2, r3]
				if (tmp[index] == selected_duration_buf[0])
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	4a86      	ldr	r2, [pc, #536]	; (80006bc <traffic_light+0x28c>)
 80004a2:	5cd2      	ldrb	r2, [r2, r3]
 80004a4:	4b84      	ldr	r3, [pc, #528]	; (80006b8 <traffic_light+0x288>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d107      	bne.n	80004bc <traffic_light+0x8c>
				{
					tmp[index] = 0;
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	4a83      	ldr	r2, [pc, #524]	; (80006bc <traffic_light+0x28c>)
 80004b0:	2100      	movs	r1, #0
 80004b2:	54d1      	strb	r1, [r2, r3]
					traffic_light_state[index] = GREEN_1;
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4a7f      	ldr	r2, [pc, #508]	; (80006b4 <traffic_light+0x284>)
 80004b8:	2102      	movs	r1, #2
 80004ba:	54d1      	strb	r1, [r2, r3]
				}
				set_timer(TMR_TRAFFIC_LIGHT_1, TIMER_COUNTING_DOWN);
 80004bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 fda1 	bl	8001008 <set_timer>
			}
		}
		break;
 80004c6:	e0e6      	b.n	8000696 <traffic_light+0x266>
		case AMBER_1:
		{
			turn_on(AMBER_1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f000 fb6b 	bl	8000ba4 <turn_on>
			duration_buf[index] = selected_duration_buf[1] - tmp[index];
 80004ce:	4b7a      	ldr	r3, [pc, #488]	; (80006b8 <traffic_light+0x288>)
 80004d0:	7859      	ldrb	r1, [r3, #1]
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	4a79      	ldr	r2, [pc, #484]	; (80006bc <traffic_light+0x28c>)
 80004d6:	5cd2      	ldrb	r2, [r2, r3]
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	1a8a      	subs	r2, r1, r2
 80004dc:	b2d1      	uxtb	r1, r2
 80004de:	4a78      	ldr	r2, [pc, #480]	; (80006c0 <traffic_light+0x290>)
 80004e0:	54d1      	strb	r1, [r2, r3]
			if (b_flag_buf[TMR_TRAFFIC_LIGHT_1])
 80004e2:	4b78      	ldr	r3, [pc, #480]	; (80006c4 <traffic_light+0x294>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f000 80d7 	beq.w	800069a <traffic_light+0x26a>
			{
				tmp[index]++;
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4a73      	ldr	r2, [pc, #460]	; (80006bc <traffic_light+0x28c>)
 80004f0:	5cd2      	ldrb	r2, [r2, r3]
 80004f2:	3201      	adds	r2, #1
 80004f4:	b2d1      	uxtb	r1, r2
 80004f6:	4a71      	ldr	r2, [pc, #452]	; (80006bc <traffic_light+0x28c>)
 80004f8:	54d1      	strb	r1, [r2, r3]
				if (tmp[index] == selected_duration_buf[1])
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4a6f      	ldr	r2, [pc, #444]	; (80006bc <traffic_light+0x28c>)
 80004fe:	5cd2      	ldrb	r2, [r2, r3]
 8000500:	4b6d      	ldr	r3, [pc, #436]	; (80006b8 <traffic_light+0x288>)
 8000502:	785b      	ldrb	r3, [r3, #1]
 8000504:	429a      	cmp	r2, r3
 8000506:	d107      	bne.n	8000518 <traffic_light+0xe8>
				{
					tmp[index] = 0;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	4a6c      	ldr	r2, [pc, #432]	; (80006bc <traffic_light+0x28c>)
 800050c:	2100      	movs	r1, #0
 800050e:	54d1      	strb	r1, [r2, r3]
					traffic_light_state[index] = RED_1;
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4a68      	ldr	r2, [pc, #416]	; (80006b4 <traffic_light+0x284>)
 8000514:	2100      	movs	r1, #0
 8000516:	54d1      	strb	r1, [r2, r3]
				}
				set_timer(TMR_TRAFFIC_LIGHT_1, TIMER_COUNTING_DOWN);
 8000518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fd73 	bl	8001008 <set_timer>
			}
		}
		break;
 8000522:	e0ba      	b.n	800069a <traffic_light+0x26a>
		case GREEN_1:
		{
			turn_on(GREEN_1);
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fb3d 	bl	8000ba4 <turn_on>
			duration_buf[index] = selected_duration_buf[2] - tmp[index];
 800052a:	4b63      	ldr	r3, [pc, #396]	; (80006b8 <traffic_light+0x288>)
 800052c:	7899      	ldrb	r1, [r3, #2]
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	4a62      	ldr	r2, [pc, #392]	; (80006bc <traffic_light+0x28c>)
 8000532:	5cd2      	ldrb	r2, [r2, r3]
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	1a8a      	subs	r2, r1, r2
 8000538:	b2d1      	uxtb	r1, r2
 800053a:	4a61      	ldr	r2, [pc, #388]	; (80006c0 <traffic_light+0x290>)
 800053c:	54d1      	strb	r1, [r2, r3]
			if (b_flag_buf[TMR_TRAFFIC_LIGHT_1])
 800053e:	4b61      	ldr	r3, [pc, #388]	; (80006c4 <traffic_light+0x294>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	f000 80ab 	beq.w	800069e <traffic_light+0x26e>
			{
				tmp[index]++;
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	4a5c      	ldr	r2, [pc, #368]	; (80006bc <traffic_light+0x28c>)
 800054c:	5cd2      	ldrb	r2, [r2, r3]
 800054e:	3201      	adds	r2, #1
 8000550:	b2d1      	uxtb	r1, r2
 8000552:	4a5a      	ldr	r2, [pc, #360]	; (80006bc <traffic_light+0x28c>)
 8000554:	54d1      	strb	r1, [r2, r3]
				if (tmp[index] == selected_duration_buf[2])
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4a58      	ldr	r2, [pc, #352]	; (80006bc <traffic_light+0x28c>)
 800055a:	5cd2      	ldrb	r2, [r2, r3]
 800055c:	4b56      	ldr	r3, [pc, #344]	; (80006b8 <traffic_light+0x288>)
 800055e:	789b      	ldrb	r3, [r3, #2]
 8000560:	429a      	cmp	r2, r3
 8000562:	d107      	bne.n	8000574 <traffic_light+0x144>
				{
					tmp[index] = 0;
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4a55      	ldr	r2, [pc, #340]	; (80006bc <traffic_light+0x28c>)
 8000568:	2100      	movs	r1, #0
 800056a:	54d1      	strb	r1, [r2, r3]
					traffic_light_state[index] = AMBER_1;
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4a51      	ldr	r2, [pc, #324]	; (80006b4 <traffic_light+0x284>)
 8000570:	2101      	movs	r1, #1
 8000572:	54d1      	strb	r1, [r2, r3]
				}
				set_timer(TMR_TRAFFIC_LIGHT_1, TIMER_COUNTING_DOWN);
 8000574:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fd45 	bl	8001008 <set_timer>
			}
		}
		break;
 800057e:	e08e      	b.n	800069e <traffic_light+0x26e>
		case RED_2:
		{
			turn_on(RED_2);
 8000580:	2003      	movs	r0, #3
 8000582:	f000 fb0f 	bl	8000ba4 <turn_on>
			duration_buf[index] = selected_duration_buf[0] - tmp[index];
 8000586:	4b4c      	ldr	r3, [pc, #304]	; (80006b8 <traffic_light+0x288>)
 8000588:	7819      	ldrb	r1, [r3, #0]
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <traffic_light+0x28c>)
 800058e:	5cd2      	ldrb	r2, [r2, r3]
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	1a8a      	subs	r2, r1, r2
 8000594:	b2d1      	uxtb	r1, r2
 8000596:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <traffic_light+0x290>)
 8000598:	54d1      	strb	r1, [r2, r3]
			if (b_flag_buf[TMR_TRAFFIC_LIGHT_2])
 800059a:	4b4a      	ldr	r3, [pc, #296]	; (80006c4 <traffic_light+0x294>)
 800059c:	785b      	ldrb	r3, [r3, #1]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d07f      	beq.n	80006a2 <traffic_light+0x272>
			{
				tmp[index]++;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4a45      	ldr	r2, [pc, #276]	; (80006bc <traffic_light+0x28c>)
 80005a6:	5cd2      	ldrb	r2, [r2, r3]
 80005a8:	3201      	adds	r2, #1
 80005aa:	b2d1      	uxtb	r1, r2
 80005ac:	4a43      	ldr	r2, [pc, #268]	; (80006bc <traffic_light+0x28c>)
 80005ae:	54d1      	strb	r1, [r2, r3]
				if (tmp[index] == selected_duration_buf[0])
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	4a42      	ldr	r2, [pc, #264]	; (80006bc <traffic_light+0x28c>)
 80005b4:	5cd2      	ldrb	r2, [r2, r3]
 80005b6:	4b40      	ldr	r3, [pc, #256]	; (80006b8 <traffic_light+0x288>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d107      	bne.n	80005ce <traffic_light+0x19e>
				{
					tmp[index] = 0;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4a3e      	ldr	r2, [pc, #248]	; (80006bc <traffic_light+0x28c>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	54d1      	strb	r1, [r2, r3]
					traffic_light_state[index] = GREEN_2;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	4a3a      	ldr	r2, [pc, #232]	; (80006b4 <traffic_light+0x284>)
 80005ca:	2105      	movs	r1, #5
 80005cc:	54d1      	strb	r1, [r2, r3]
				}
				set_timer(TMR_TRAFFIC_LIGHT_2, TIMER_COUNTING_DOWN);
 80005ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 fd18 	bl	8001008 <set_timer>
			}
		}
		break;
 80005d8:	e063      	b.n	80006a2 <traffic_light+0x272>
		case AMBER_2:
		{
			turn_on(AMBER_2);
 80005da:	2004      	movs	r0, #4
 80005dc:	f000 fae2 	bl	8000ba4 <turn_on>
			duration_buf[index] = selected_duration_buf[1] - tmp[index];
 80005e0:	4b35      	ldr	r3, [pc, #212]	; (80006b8 <traffic_light+0x288>)
 80005e2:	7859      	ldrb	r1, [r3, #1]
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	4a35      	ldr	r2, [pc, #212]	; (80006bc <traffic_light+0x28c>)
 80005e8:	5cd2      	ldrb	r2, [r2, r3]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	1a8a      	subs	r2, r1, r2
 80005ee:	b2d1      	uxtb	r1, r2
 80005f0:	4a33      	ldr	r2, [pc, #204]	; (80006c0 <traffic_light+0x290>)
 80005f2:	54d1      	strb	r1, [r2, r3]
			if (b_flag_buf[TMR_TRAFFIC_LIGHT_2])
 80005f4:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <traffic_light+0x294>)
 80005f6:	785b      	ldrb	r3, [r3, #1]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d054      	beq.n	80006a6 <traffic_light+0x276>
			{
				tmp[index]++;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4a2f      	ldr	r2, [pc, #188]	; (80006bc <traffic_light+0x28c>)
 8000600:	5cd2      	ldrb	r2, [r2, r3]
 8000602:	3201      	adds	r2, #1
 8000604:	b2d1      	uxtb	r1, r2
 8000606:	4a2d      	ldr	r2, [pc, #180]	; (80006bc <traffic_light+0x28c>)
 8000608:	54d1      	strb	r1, [r2, r3]
				if (tmp[index] == selected_duration_buf[1])
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <traffic_light+0x28c>)
 800060e:	5cd2      	ldrb	r2, [r2, r3]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <traffic_light+0x288>)
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	429a      	cmp	r2, r3
 8000616:	d107      	bne.n	8000628 <traffic_light+0x1f8>
				{
					tmp[index] = 0;
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4a28      	ldr	r2, [pc, #160]	; (80006bc <traffic_light+0x28c>)
 800061c:	2100      	movs	r1, #0
 800061e:	54d1      	strb	r1, [r2, r3]
					traffic_light_state[index] = RED_2;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <traffic_light+0x284>)
 8000624:	2103      	movs	r1, #3
 8000626:	54d1      	strb	r1, [r2, r3]
				}
				set_timer(TMR_TRAFFIC_LIGHT_2, TIMER_COUNTING_DOWN);
 8000628:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800062c:	2001      	movs	r0, #1
 800062e:	f000 fceb 	bl	8001008 <set_timer>
			}
		}
		break;
 8000632:	e038      	b.n	80006a6 <traffic_light+0x276>
		case GREEN_2:
		{
			turn_on(GREEN_2);
 8000634:	2005      	movs	r0, #5
 8000636:	f000 fab5 	bl	8000ba4 <turn_on>
			duration_buf[index] = selected_duration_buf[2] - tmp[index];
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <traffic_light+0x288>)
 800063c:	7899      	ldrb	r1, [r3, #2]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4a1e      	ldr	r2, [pc, #120]	; (80006bc <traffic_light+0x28c>)
 8000642:	5cd2      	ldrb	r2, [r2, r3]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	1a8a      	subs	r2, r1, r2
 8000648:	b2d1      	uxtb	r1, r2
 800064a:	4a1d      	ldr	r2, [pc, #116]	; (80006c0 <traffic_light+0x290>)
 800064c:	54d1      	strb	r1, [r2, r3]
			if (b_flag_buf[TMR_TRAFFIC_LIGHT_2])
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <traffic_light+0x294>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d029      	beq.n	80006aa <traffic_light+0x27a>
			{
				tmp[index]++;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4a18      	ldr	r2, [pc, #96]	; (80006bc <traffic_light+0x28c>)
 800065a:	5cd2      	ldrb	r2, [r2, r3]
 800065c:	3201      	adds	r2, #1
 800065e:	b2d1      	uxtb	r1, r2
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <traffic_light+0x28c>)
 8000662:	54d1      	strb	r1, [r2, r3]
				if (tmp[index] == selected_duration_buf[2])
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <traffic_light+0x28c>)
 8000668:	5cd2      	ldrb	r2, [r2, r3]
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <traffic_light+0x288>)
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	429a      	cmp	r2, r3
 8000670:	d107      	bne.n	8000682 <traffic_light+0x252>
				{
					tmp[index] = 0;
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4a11      	ldr	r2, [pc, #68]	; (80006bc <traffic_light+0x28c>)
 8000676:	2100      	movs	r1, #0
 8000678:	54d1      	strb	r1, [r2, r3]
					traffic_light_state[index] = AMBER_2;
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <traffic_light+0x284>)
 800067e:	2104      	movs	r1, #4
 8000680:	54d1      	strb	r1, [r2, r3]
				}
				set_timer(TMR_TRAFFIC_LIGHT_2, TIMER_COUNTING_DOWN);
 8000682:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000686:	2001      	movs	r0, #1
 8000688:	f000 fcbe 	bl	8001008 <set_timer>
			}
		}
		break;
 800068c:	e00d      	b.n	80006aa <traffic_light+0x27a>
	if (index >= 2) return;
 800068e:	bf00      	nop
 8000690:	e00c      	b.n	80006ac <traffic_light+0x27c>
		default:
		break;
 8000692:	bf00      	nop
 8000694:	e00a      	b.n	80006ac <traffic_light+0x27c>
		break;
 8000696:	bf00      	nop
 8000698:	e008      	b.n	80006ac <traffic_light+0x27c>
		break;
 800069a:	bf00      	nop
 800069c:	e006      	b.n	80006ac <traffic_light+0x27c>
		break;
 800069e:	bf00      	nop
 80006a0:	e004      	b.n	80006ac <traffic_light+0x27c>
		break;
 80006a2:	bf00      	nop
 80006a4:	e002      	b.n	80006ac <traffic_light+0x27c>
		break;
 80006a6:	bf00      	nop
 80006a8:	e000      	b.n	80006ac <traffic_light+0x27c>
		break;
 80006aa:	bf00      	nop
	}
}
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000050 	.word	0x20000050
 80006b8:	20000054 	.word	0x20000054
 80006bc:	20000060 	.word	0x20000060
 80006c0:	2000005c 	.word	0x2000005c
 80006c4:	200000c0 	.word	0x200000c0

080006c8 <main_init>:

void main_init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	set_timer(TMR_TRAFFIC_LIGHT_1, TIMER_COUNTING_DOWN);
 80006cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fc99 	bl	8001008 <set_timer>
	set_timer(TMR_TRAFFIC_LIGHT_2, TIMER_COUNTING_DOWN);
 80006d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fc94 	bl	8001008 <set_timer>
	set_timer(TMR_SCANNING_7SEG_LED, TIMER_INTERRUPT);
 80006e0:	210a      	movs	r1, #10
 80006e2:	2004      	movs	r0, #4
 80006e4:	f000 fc90 	bl	8001008 <set_timer>

	mode = MODE_1_NORMAL;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <main_init+0x48>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]

	selected_duration_buf[0] = 5;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <main_init+0x4c>)
 80006f0:	2205      	movs	r2, #5
 80006f2:	701a      	strb	r2, [r3, #0]
	selected_duration_buf[1] = 2;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <main_init+0x4c>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	705a      	strb	r2, [r3, #1]
	selected_duration_buf[2] = 3;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <main_init+0x4c>)
 80006fc:	2203      	movs	r2, #3
 80006fe:	709a      	strb	r2, [r3, #2]

	traffic_light_state[0] = RED_1;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <main_init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
	traffic_light_state[1] = GREEN_2;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <main_init+0x50>)
 8000708:	2205      	movs	r2, #5
 800070a:	705a      	strb	r2, [r3, #1]
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000076 	.word	0x20000076
 8000714:	20000054 	.word	0x20000054
 8000718:	20000050 	.word	0x20000050

0800071c <display_mode>:

void display_mode(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	switch (mode)
 8000720:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <display_mode+0xc8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d859      	bhi.n	80007dc <display_mode+0xc0>
 8000728:	a201      	add	r2, pc, #4	; (adr r2, 8000730 <display_mode+0x14>)
 800072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072e:	bf00      	nop
 8000730:	08000741 	.word	0x08000741
 8000734:	0800075f 	.word	0x0800075f
 8000738:	08000789 	.word	0x08000789
 800073c:	080007b3 	.word	0x080007b3
	{
		case MODE_1_NORMAL:
		{
			traffic_light(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff fe75 	bl	8000430 <traffic_light>
			traffic_light(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff fe72 	bl	8000430 <traffic_light>

			display_7seg_led(duration_buf[0], duration_buf[1]);
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <display_mode+0xcc>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <display_mode+0xcc>)
 8000752:	7852      	ldrb	r2, [r2, #1]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f9e8 	bl	8000b2c <display_7seg_led>
		}
		break;
 800075c:	e03f      	b.n	80007de <display_mode+0xc2>
		case MODE_2_MODIFY_RED:
		{
			if (b_flag_buf[TMR_BLINKING_LED])
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <display_mode+0xd0>)
 8000760:	789b      	ldrb	r3, [r3, #2]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d009      	beq.n	800077a <display_mode+0x5e>
			{
				blink(RED_1);
 8000766:	2000      	movs	r0, #0
 8000768:	f000 fa7a 	bl	8000c60 <blink>
				blink(RED_2);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 fa77 	bl	8000c60 <blink>
				set_timer(TMR_BLINKING_LED, TIMER_BLINKING_LED);
 8000772:	21fa      	movs	r1, #250	; 0xfa
 8000774:	2002      	movs	r0, #2
 8000776:	f000 fc47 	bl	8001008 <set_timer>
			}

			display_7seg_led(modified_duration_buf[0], 2);
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <display_mode+0xd4>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f9d3 	bl	8000b2c <display_7seg_led>
		}
		break;
 8000786:	e02a      	b.n	80007de <display_mode+0xc2>
		case MODE_3_MODIFY_AMBER:
		{
			if (b_flag_buf[TMR_BLINKING_LED])
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <display_mode+0xd0>)
 800078a:	789b      	ldrb	r3, [r3, #2]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d009      	beq.n	80007a4 <display_mode+0x88>
			{
				blink(AMBER_1);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 fa65 	bl	8000c60 <blink>
				blink(AMBER_2);
 8000796:	2004      	movs	r0, #4
 8000798:	f000 fa62 	bl	8000c60 <blink>
				set_timer(TMR_BLINKING_LED, TIMER_BLINKING_LED);
 800079c:	21fa      	movs	r1, #250	; 0xfa
 800079e:	2002      	movs	r0, #2
 80007a0:	f000 fc32 	bl	8001008 <set_timer>
			}

			display_7seg_led(modified_duration_buf[1], 3);
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <display_mode+0xd4>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	2103      	movs	r1, #3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f9be 	bl	8000b2c <display_7seg_led>
		}
		break;
 80007b0:	e015      	b.n	80007de <display_mode+0xc2>
		case MODE_4_MODIFY_GREEN:
		{
			if (b_flag_buf[TMR_BLINKING_LED])
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <display_mode+0xd0>)
 80007b4:	789b      	ldrb	r3, [r3, #2]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d009      	beq.n	80007ce <display_mode+0xb2>
			{
				blink(GREEN_1);
 80007ba:	2002      	movs	r0, #2
 80007bc:	f000 fa50 	bl	8000c60 <blink>
				blink(GREEN_2);
 80007c0:	2005      	movs	r0, #5
 80007c2:	f000 fa4d 	bl	8000c60 <blink>
				set_timer(TMR_BLINKING_LED, TIMER_BLINKING_LED);
 80007c6:	21fa      	movs	r1, #250	; 0xfa
 80007c8:	2002      	movs	r0, #2
 80007ca:	f000 fc1d 	bl	8001008 <set_timer>
			}

			display_7seg_led(modified_duration_buf[2], 4);
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <display_mode+0xd4>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	2104      	movs	r1, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f9a9 	bl	8000b2c <display_7seg_led>
		}
		break;
 80007da:	e000      	b.n	80007de <display_mode+0xc2>
		default:
		break;
 80007dc:	bf00      	nop
	}
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000076 	.word	0x20000076
 80007e8:	2000005c 	.word	0x2000005c
 80007ec:	200000c0 	.word	0x200000c0
 80007f0:	20000058 	.word	0x20000058

080007f4 <scan_7seg_led>:

void scan_7seg_led(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	if (b_flag_buf[TMR_SCANNING_7SEG_LED])
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <scan_7seg_led+0x1c>)
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d005      	beq.n	800080c <scan_7seg_led+0x18>
	{
		scan_led_buf();
 8000800:	f000 f972 	bl	8000ae8 <scan_led_buf>
		set_timer(TMR_SCANNING_7SEG_LED, TIMER_SCANNING_7SEG_LED);
 8000804:	21fa      	movs	r1, #250	; 0xfa
 8000806:	2004      	movs	r0, #4
 8000808:	f000 fbfe 	bl	8001008 <set_timer>
	}
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000c0 	.word	0x200000c0

08000814 <begin_mode>:

void begin_mode(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	if (mode == MODE_1_NORMAL)
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <begin_mode+0x94>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d11a      	bne.n	8000856 <begin_mode+0x42>
	{
		traffic_light_state[0] = RED_1;
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <begin_mode+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
		traffic_light_state[1] = GREEN_2;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <begin_mode+0x98>)
 8000828:	2205      	movs	r2, #5
 800082a:	705a      	strb	r2, [r3, #1]
		set_timer(TMR_TRAFFIC_LIGHT_1, TIMER_COUNTING_DOWN);
 800082c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fbe9 	bl	8001008 <set_timer>
		set_timer(TMR_TRAFFIC_LIGHT_2, TIMER_COUNTING_DOWN);
 8000836:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800083a:	2001      	movs	r0, #1
 800083c:	f000 fbe4 	bl	8001008 <set_timer>
		set_timer(TMR_SCANNING_7SEG_LED, TIMER_INTERRUPT);
 8000840:	210a      	movs	r1, #10
 8000842:	2004      	movs	r0, #4
 8000844:	f000 fbe0 	bl	8001008 <set_timer>
		tmp[0] = 0;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <begin_mode+0x9c>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
		tmp[1] = 0;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <begin_mode+0x9c>)
 8000850:	2200      	movs	r2, #0
 8000852:	705a      	strb	r2, [r3, #1]
	else if (mode == MODE_4_MODIFY_GREEN)
	{
		set_timer(TMR_BLINKING_LED, TIMER_BLINKING_LED);
		modified_duration_buf[2] = selected_duration_buf[2];
	}
}
 8000854:	e025      	b.n	80008a2 <begin_mode+0x8e>
	else if (mode == MODE_2_MODIFY_RED)
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <begin_mode+0x94>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d108      	bne.n	8000870 <begin_mode+0x5c>
		set_timer(TMR_BLINKING_LED, TIMER_BLINKING_LED);
 800085e:	21fa      	movs	r1, #250	; 0xfa
 8000860:	2002      	movs	r0, #2
 8000862:	f000 fbd1 	bl	8001008 <set_timer>
		modified_duration_buf[0] = selected_duration_buf[0];
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <begin_mode+0xa0>)
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <begin_mode+0xa4>)
 800086c:	701a      	strb	r2, [r3, #0]
}
 800086e:	e018      	b.n	80008a2 <begin_mode+0x8e>
	else if (mode == MODE_3_MODIFY_AMBER)
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <begin_mode+0x94>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d108      	bne.n	800088a <begin_mode+0x76>
		set_timer(TMR_BLINKING_LED, TIMER_BLINKING_LED);
 8000878:	21fa      	movs	r1, #250	; 0xfa
 800087a:	2002      	movs	r0, #2
 800087c:	f000 fbc4 	bl	8001008 <set_timer>
		modified_duration_buf[1] = selected_duration_buf[1];
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <begin_mode+0xa0>)
 8000882:	785a      	ldrb	r2, [r3, #1]
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <begin_mode+0xa4>)
 8000886:	705a      	strb	r2, [r3, #1]
}
 8000888:	e00b      	b.n	80008a2 <begin_mode+0x8e>
	else if (mode == MODE_4_MODIFY_GREEN)
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <begin_mode+0x94>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d107      	bne.n	80008a2 <begin_mode+0x8e>
		set_timer(TMR_BLINKING_LED, TIMER_BLINKING_LED);
 8000892:	21fa      	movs	r1, #250	; 0xfa
 8000894:	2002      	movs	r0, #2
 8000896:	f000 fbb7 	bl	8001008 <set_timer>
		modified_duration_buf[2] = selected_duration_buf[2];
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <begin_mode+0xa0>)
 800089c:	789a      	ldrb	r2, [r3, #2]
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <begin_mode+0xa4>)
 80008a0:	709a      	strb	r2, [r3, #2]
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000076 	.word	0x20000076
 80008ac:	20000050 	.word	0x20000050
 80008b0:	20000060 	.word	0x20000060
 80008b4:	20000054 	.word	0x20000054
 80008b8:	20000058 	.word	0x20000058

080008bc <increase_duration_value>:

void increase_duration_value(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
	if (mode == MODE_2_MODIFY_RED)
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <increase_duration_value+0x70>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d10c      	bne.n	80008e2 <increase_duration_value+0x26>
	{
		modified_duration_buf[0] = (modified_duration_buf[0] >= 99) ? 0 : modified_duration_buf[0]+1;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <increase_duration_value+0x74>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b62      	cmp	r3, #98	; 0x62
 80008ce:	d804      	bhi.n	80008da <increase_duration_value+0x1e>
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <increase_duration_value+0x74>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	e000      	b.n	80008dc <increase_duration_value+0x20>
 80008da:	2300      	movs	r3, #0
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <increase_duration_value+0x74>)
 80008de:	7013      	strb	r3, [r2, #0]
	}
	else if (mode == MODE_4_MODIFY_GREEN)
	{
		modified_duration_buf[2] = (modified_duration_buf[2] >= 99) ? 0 : modified_duration_buf[2]+1;
	}
}
 80008e0:	e020      	b.n	8000924 <increase_duration_value+0x68>
	else if (mode == MODE_3_MODIFY_AMBER)
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <increase_duration_value+0x70>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d10c      	bne.n	8000904 <increase_duration_value+0x48>
		modified_duration_buf[1] = (modified_duration_buf[1] >= 99) ? 0 : modified_duration_buf[1]+1;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <increase_duration_value+0x74>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	2b62      	cmp	r3, #98	; 0x62
 80008f0:	d804      	bhi.n	80008fc <increase_duration_value+0x40>
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <increase_duration_value+0x74>)
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	3301      	adds	r3, #1
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	e000      	b.n	80008fe <increase_duration_value+0x42>
 80008fc:	2300      	movs	r3, #0
 80008fe:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <increase_duration_value+0x74>)
 8000900:	7053      	strb	r3, [r2, #1]
}
 8000902:	e00f      	b.n	8000924 <increase_duration_value+0x68>
	else if (mode == MODE_4_MODIFY_GREEN)
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <increase_duration_value+0x70>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d10b      	bne.n	8000924 <increase_duration_value+0x68>
		modified_duration_buf[2] = (modified_duration_buf[2] >= 99) ? 0 : modified_duration_buf[2]+1;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <increase_duration_value+0x74>)
 800090e:	789b      	ldrb	r3, [r3, #2]
 8000910:	2b62      	cmp	r3, #98	; 0x62
 8000912:	d804      	bhi.n	800091e <increase_duration_value+0x62>
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <increase_duration_value+0x74>)
 8000916:	789b      	ldrb	r3, [r3, #2]
 8000918:	3301      	adds	r3, #1
 800091a:	b2db      	uxtb	r3, r3
 800091c:	e000      	b.n	8000920 <increase_duration_value+0x64>
 800091e:	2300      	movs	r3, #0
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <increase_duration_value+0x74>)
 8000922:	7093      	strb	r3, [r2, #2]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000076 	.word	0x20000076
 8000930:	20000058 	.word	0x20000058

08000934 <save_selected_duration_value>:

void save_selected_duration_value(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	if (mode == MODE_2_MODIFY_RED)
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <save_selected_duration_value+0x40>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d104      	bne.n	800094a <save_selected_duration_value+0x16>
	{
		selected_duration_buf[0] = modified_duration_buf[0];
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <save_selected_duration_value+0x44>)
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <save_selected_duration_value+0x48>)
 8000946:	701a      	strb	r2, [r3, #0]
	}
	else if (mode == MODE_4_MODIFY_GREEN)
	{
		selected_duration_buf[2] = modified_duration_buf[2];
	}
}
 8000948:	e010      	b.n	800096c <save_selected_duration_value+0x38>
	else if (mode == MODE_3_MODIFY_AMBER)
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <save_selected_duration_value+0x40>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d104      	bne.n	800095c <save_selected_duration_value+0x28>
		selected_duration_buf[1] = modified_duration_buf[1];
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <save_selected_duration_value+0x44>)
 8000954:	785a      	ldrb	r2, [r3, #1]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <save_selected_duration_value+0x48>)
 8000958:	705a      	strb	r2, [r3, #1]
}
 800095a:	e007      	b.n	800096c <save_selected_duration_value+0x38>
	else if (mode == MODE_4_MODIFY_GREEN)
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <save_selected_duration_value+0x40>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d103      	bne.n	800096c <save_selected_duration_value+0x38>
		selected_duration_buf[2] = modified_duration_buf[2];
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <save_selected_duration_value+0x44>)
 8000966:	789a      	ldrb	r2, [r3, #2]
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <save_selected_duration_value+0x48>)
 800096a:	709a      	strb	r2, [r3, #2]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000076 	.word	0x20000076
 8000978:	20000058 	.word	0x20000058
 800097c:	20000054 	.word	0x20000054

08000980 <display_num>:
static uint8_t led_7seg_buf[10] = { 0x01, 0x4f, 0x12, 0x06, 0x4c, 0x24, 0x20, 0x0f, 0x00, 0x04 };
static uint8_t led_buf[4];
static uint8_t led_index;

static void display_num(uint8_t number)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	if (number >= 10) return;
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b09      	cmp	r3, #9
 800098e:	d859      	bhi.n	8000a44 <display_num+0xc4>
	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, (led_7seg_buf[number] & 0x40) >> 6);
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a2e      	ldr	r2, [pc, #184]	; (8000a4c <display_num+0xcc>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	119b      	asrs	r3, r3, #6
 8000998:	b2db      	uxtb	r3, r3
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	2101      	movs	r1, #1
 80009a4:	482a      	ldr	r0, [pc, #168]	; (8000a50 <display_num+0xd0>)
 80009a6:	f000 febe 	bl	8001726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, (led_7seg_buf[number] & 0x20) >> 5);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <display_num+0xcc>)
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	115b      	asrs	r3, r3, #5
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	2102      	movs	r1, #2
 80009be:	4824      	ldr	r0, [pc, #144]	; (8000a50 <display_num+0xd0>)
 80009c0:	f000 feb1 	bl	8001726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, (led_7seg_buf[number] & 0x10) >> 4);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <display_num+0xcc>)
 80009c8:	5cd3      	ldrb	r3, [r2, r3]
 80009ca:	111b      	asrs	r3, r3, #4
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	2104      	movs	r1, #4
 80009d8:	481d      	ldr	r0, [pc, #116]	; (8000a50 <display_num+0xd0>)
 80009da:	f000 fea4 	bl	8001726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, (led_7seg_buf[number] & 0x08) >> 3);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <display_num+0xcc>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	10db      	asrs	r3, r3, #3
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	2108      	movs	r1, #8
 80009f2:	4817      	ldr	r0, [pc, #92]	; (8000a50 <display_num+0xd0>)
 80009f4:	f000 fe97 	bl	8001726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, (led_7seg_buf[number] & 0x04) >> 2);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <display_num+0xcc>)
 80009fc:	5cd3      	ldrb	r3, [r2, r3]
 80009fe:	109b      	asrs	r3, r3, #2
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4810      	ldr	r0, [pc, #64]	; (8000a50 <display_num+0xd0>)
 8000a0e:	f000 fe8a 	bl	8001726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, (led_7seg_buf[number] & 0x02) >> 1);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <display_num+0xcc>)
 8000a16:	5cd3      	ldrb	r3, [r2, r3]
 8000a18:	105b      	asrs	r3, r3, #1
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	2120      	movs	r1, #32
 8000a26:	480a      	ldr	r0, [pc, #40]	; (8000a50 <display_num+0xd0>)
 8000a28:	f000 fe7d 	bl	8001726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, (led_7seg_buf[number] & 0x01));
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <display_num+0xcc>)
 8000a30:	5cd3      	ldrb	r3, [r2, r3]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2140      	movs	r1, #64	; 0x40
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <display_num+0xd0>)
 8000a3e:	f000 fe72 	bl	8001726 <HAL_GPIO_WritePin>
 8000a42:	e000      	b.n	8000a46 <display_num+0xc6>
	if (number >= 10) return;
 8000a44:	bf00      	nop
}
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	40010c00 	.word	0x40010c00

08000a54 <enable_7seg_led>:

static void enable_7seg_led(uint8_t index)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	if (index == 0)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10b      	bne.n	8000a7c <enable_7seg_led+0x28>
	{
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, ON);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	481e      	ldr	r0, [pc, #120]	; (8000ae4 <enable_7seg_led+0x90>)
 8000a6a:	f000 fe5c 	bl	8001726 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_1_Pin | EN_2_Pin | EN_3_Pin, OFF);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000a74:	481b      	ldr	r0, [pc, #108]	; (8000ae4 <enable_7seg_led+0x90>)
 8000a76:	f000 fe56 	bl	8001726 <HAL_GPIO_WritePin>
	else if (index == 3)
	{
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, ON);
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_1_Pin | EN_2_Pin | EN_0_Pin, OFF);
	}
}
 8000a7a:	e02e      	b.n	8000ada <enable_7seg_led+0x86>
	else if (index == 1)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d10c      	bne.n	8000a9c <enable_7seg_led+0x48>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, ON);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a88:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <enable_7seg_led+0x90>)
 8000a8a:	f000 fe4c 	bl	8001726 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_0_Pin | EN_2_Pin | EN_3_Pin, OFF);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <enable_7seg_led+0x90>)
 8000a96:	f000 fe46 	bl	8001726 <HAL_GPIO_WritePin>
}
 8000a9a:	e01e      	b.n	8000ada <enable_7seg_led+0x86>
	else if (index == 2)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d10c      	bne.n	8000abc <enable_7seg_led+0x68>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, ON);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa8:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <enable_7seg_led+0x90>)
 8000aaa:	f000 fe3c 	bl	8001726 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_1_Pin | EN_0_Pin | EN_3_Pin, OFF);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <enable_7seg_led+0x90>)
 8000ab6:	f000 fe36 	bl	8001726 <HAL_GPIO_WritePin>
}
 8000aba:	e00e      	b.n	8000ada <enable_7seg_led+0x86>
	else if (index == 3)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d10b      	bne.n	8000ada <enable_7seg_led+0x86>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, ON);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <enable_7seg_led+0x90>)
 8000aca:	f000 fe2c 	bl	8001726 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_1_Pin | EN_2_Pin | EN_0_Pin, OFF);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <enable_7seg_led+0x90>)
 8000ad6:	f000 fe26 	bl	8001726 <HAL_GPIO_WritePin>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40010800 	.word	0x40010800

08000ae8 <scan_led_buf>:

void scan_led_buf(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	enable_7seg_led(led_index);
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <scan_led_buf+0x3c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffaf 	bl	8000a54 <enable_7seg_led>
	display_num(led_buf[led_index]);
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <scan_led_buf+0x3c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <scan_led_buf+0x40>)
 8000afe:	5c9b      	ldrb	r3, [r3, r2]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff3d 	bl	8000980 <display_num>
	led_index = (led_index >= 3) ? 0 : led_index+1;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <scan_led_buf+0x3c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d804      	bhi.n	8000b18 <scan_led_buf+0x30>
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <scan_led_buf+0x3c>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	e000      	b.n	8000b1a <scan_led_buf+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	4a02      	ldr	r2, [pc, #8]	; (8000b24 <scan_led_buf+0x3c>)
 8000b1c:	7013      	strb	r3, [r2, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000068 	.word	0x20000068
 8000b28:	20000064 	.word	0x20000064

08000b2c <display_7seg_led>:

void display_7seg_led(uint8_t num_1, uint8_t num_2)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	71bb      	strb	r3, [r7, #6]
	led_buf[0] = num_1 / 10;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <display_7seg_led+0x70>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <display_7seg_led+0x74>)
 8000b4a:	701a      	strb	r2, [r3, #0]
	led_buf[1] = num_1 % 10;
 8000b4c:	79fa      	ldrb	r2, [r7, #7]
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <display_7seg_led+0x70>)
 8000b50:	fba3 1302 	umull	r1, r3, r3, r2
 8000b54:	08d9      	lsrs	r1, r3, #3
 8000b56:	460b      	mov	r3, r1
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <display_7seg_led+0x74>)
 8000b64:	705a      	strb	r2, [r3, #1]
	led_buf[2] = num_2 / 10;
 8000b66:	79bb      	ldrb	r3, [r7, #6]
 8000b68:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <display_7seg_led+0x70>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <display_7seg_led+0x74>)
 8000b74:	709a      	strb	r2, [r3, #2]
	led_buf[3] = num_2 % 10;
 8000b76:	79ba      	ldrb	r2, [r7, #6]
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <display_7seg_led+0x70>)
 8000b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b7e:	08d9      	lsrs	r1, r3, #3
 8000b80:	460b      	mov	r3, r1
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <display_7seg_led+0x74>)
 8000b8e:	70da      	strb	r2, [r3, #3]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	cccccccd 	.word	0xcccccccd
 8000ba0:	20000064 	.word	0x20000064

08000ba4 <turn_on>:

void turn_on(light_t light)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	if (light == RED_1)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10a      	bne.n	8000bca <turn_on+0x26>
	{
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, ON);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4828      	ldr	r0, [pc, #160]	; (8000c5c <turn_on+0xb8>)
 8000bba:	f000 fdb4 	bl	8001726 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, AMBER_1_Pin | GREEN_1_Pin, OFF);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	210c      	movs	r1, #12
 8000bc2:	4826      	ldr	r0, [pc, #152]	; (8000c5c <turn_on+0xb8>)
 8000bc4:	f000 fdaf 	bl	8001726 <HAL_GPIO_WritePin>
	else if (light == GREEN_2)
	{
		HAL_GPIO_WritePin(RED_2_GPIO_Port, GREEN_2_Pin, ON);
		HAL_GPIO_WritePin(RED_2_GPIO_Port, AMBER_2_Pin | RED_2_Pin, OFF);
	}
}
 8000bc8:	e044      	b.n	8000c54 <turn_on+0xb0>
	else if (light == AMBER_1)
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10a      	bne.n	8000be6 <turn_on+0x42>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, AMBER_1_Pin, ON);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	4821      	ldr	r0, [pc, #132]	; (8000c5c <turn_on+0xb8>)
 8000bd6:	f000 fda6 	bl	8001726 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin | GREEN_1_Pin, OFF);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	210a      	movs	r1, #10
 8000bde:	481f      	ldr	r0, [pc, #124]	; (8000c5c <turn_on+0xb8>)
 8000be0:	f000 fda1 	bl	8001726 <HAL_GPIO_WritePin>
}
 8000be4:	e036      	b.n	8000c54 <turn_on+0xb0>
	else if (light == GREEN_1)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d10a      	bne.n	8000c02 <turn_on+0x5e>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, GREEN_1_Pin, ON);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2108      	movs	r1, #8
 8000bf0:	481a      	ldr	r0, [pc, #104]	; (8000c5c <turn_on+0xb8>)
 8000bf2:	f000 fd98 	bl	8001726 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, AMBER_1_Pin | RED_1_Pin, OFF);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2106      	movs	r1, #6
 8000bfa:	4818      	ldr	r0, [pc, #96]	; (8000c5c <turn_on+0xb8>)
 8000bfc:	f000 fd93 	bl	8001726 <HAL_GPIO_WritePin>
}
 8000c00:	e028      	b.n	8000c54 <turn_on+0xb0>
	else if (light == RED_2)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d10a      	bne.n	8000c1e <turn_on+0x7a>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, ON);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	4813      	ldr	r0, [pc, #76]	; (8000c5c <turn_on+0xb8>)
 8000c0e:	f000 fd8a 	bl	8001726 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, AMBER_2_Pin | GREEN_2_Pin, OFF);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2160      	movs	r1, #96	; 0x60
 8000c16:	4811      	ldr	r0, [pc, #68]	; (8000c5c <turn_on+0xb8>)
 8000c18:	f000 fd85 	bl	8001726 <HAL_GPIO_WritePin>
}
 8000c1c:	e01a      	b.n	8000c54 <turn_on+0xb0>
	else if (light == AMBER_2)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d10a      	bne.n	8000c3a <turn_on+0x96>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, AMBER_2_Pin, ON);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2120      	movs	r1, #32
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <turn_on+0xb8>)
 8000c2a:	f000 fd7c 	bl	8001726 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin | GREEN_2_Pin, OFF);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2150      	movs	r1, #80	; 0x50
 8000c32:	480a      	ldr	r0, [pc, #40]	; (8000c5c <turn_on+0xb8>)
 8000c34:	f000 fd77 	bl	8001726 <HAL_GPIO_WritePin>
}
 8000c38:	e00c      	b.n	8000c54 <turn_on+0xb0>
	else if (light == GREEN_2)
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b05      	cmp	r3, #5
 8000c3e:	d109      	bne.n	8000c54 <turn_on+0xb0>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, GREEN_2_Pin, ON);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2140      	movs	r1, #64	; 0x40
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <turn_on+0xb8>)
 8000c46:	f000 fd6e 	bl	8001726 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, AMBER_2_Pin | RED_2_Pin, OFF);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2130      	movs	r1, #48	; 0x30
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <turn_on+0xb8>)
 8000c50:	f000 fd69 	bl	8001726 <HAL_GPIO_WritePin>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40010800 	.word	0x40010800

08000c60 <blink>:

void blink(light_t light)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	if (light == RED_1)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <blink+0x1a>
	{
		HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8000c70:	2102      	movs	r1, #2
 8000c72:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <blink+0x70>)
 8000c74:	f000 fd6f 	bl	8001756 <HAL_GPIO_TogglePin>
	}
	else if (light == GREEN_2)
	{
		HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
	}
}
 8000c78:	e026      	b.n	8000cc8 <blink+0x68>
	else if (light == AMBER_1)
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d104      	bne.n	8000c8a <blink+0x2a>
		HAL_GPIO_TogglePin(AMBER_1_GPIO_Port, AMBER_1_Pin);
 8000c80:	2104      	movs	r1, #4
 8000c82:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <blink+0x70>)
 8000c84:	f000 fd67 	bl	8001756 <HAL_GPIO_TogglePin>
}
 8000c88:	e01e      	b.n	8000cc8 <blink+0x68>
	else if (light == GREEN_1)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d104      	bne.n	8000c9a <blink+0x3a>
		HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 8000c90:	2108      	movs	r1, #8
 8000c92:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <blink+0x70>)
 8000c94:	f000 fd5f 	bl	8001756 <HAL_GPIO_TogglePin>
}
 8000c98:	e016      	b.n	8000cc8 <blink+0x68>
	else if (light == RED_2)
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d104      	bne.n	8000caa <blink+0x4a>
		HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8000ca0:	2110      	movs	r1, #16
 8000ca2:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <blink+0x70>)
 8000ca4:	f000 fd57 	bl	8001756 <HAL_GPIO_TogglePin>
}
 8000ca8:	e00e      	b.n	8000cc8 <blink+0x68>
	else if (light == AMBER_2)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d104      	bne.n	8000cba <blink+0x5a>
		HAL_GPIO_TogglePin(AMBER_2_GPIO_Port, AMBER_2_Pin);
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <blink+0x70>)
 8000cb4:	f000 fd4f 	bl	8001756 <HAL_GPIO_TogglePin>
}
 8000cb8:	e006      	b.n	8000cc8 <blink+0x68>
	else if (light == GREEN_2)
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b05      	cmp	r3, #5
 8000cbe:	d103      	bne.n	8000cc8 <blink+0x68>
		HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <blink+0x70>)
 8000cc4:	f000 fd47 	bl	8001756 <HAL_GPIO_TogglePin>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <turn_all_off>:

void turn_all_off(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin | AMBER_1_Pin | GREEN_1_Pin | RED_2_Pin | AMBER_2_Pin | GREEN_2_Pin, OFF);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	217e      	movs	r1, #126	; 0x7e
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <turn_all_off+0x14>)
 8000cde:	f000 fd22 	bl	8001726 <HAL_GPIO_WritePin>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010800 	.word	0x40010800

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf0:	f000 fa18 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf4:	f000 f816 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf8:	f000 f89c 	bl	8000e34 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cfc:	f000 f84e 	bl	8000d9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <main+0x34>)
 8000d02:	f001 f979 	bl	8001ff8 <HAL_TIM_Base_Start_IT>
  main_init();
 8000d06:	f7ff fcdf 	bl	80006c8 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  display_mode();
 8000d0a:	f7ff fd07 	bl	800071c <display_mode>
	  scan_7seg_led();
 8000d0e:	f7ff fd71 	bl	80007f4 <scan_7seg_led>

	  event_btn_1();
 8000d12:	f7ff facf 	bl	80002b4 <event_btn_1>
	  event_btn_2();
 8000d16:	f7ff fb07 	bl	8000328 <event_btn_2>
	  event_btn_3();
 8000d1a:	f7ff fb5f 	bl	80003dc <event_btn_3>
	  display_mode();
 8000d1e:	e7f4      	b.n	8000d0a <main+0x1e>
 8000d20:	20000078 	.word	0x20000078

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	; 0x40
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2228      	movs	r2, #40	; 0x28
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 fd18 	bl	8002768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d56:	f107 0318 	add.w	r3, r7, #24
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fd14 	bl	8001788 <HAL_RCC_OscConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d66:	f000 f8bb 	bl	8000ee0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 ff80 	bl	8001c88 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 f8a7 	bl	8000ee0 <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3740      	adds	r7, #64	; 0x40
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dc2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dd0:	2209      	movs	r2, #9
 8000dd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000de0:	4813      	ldr	r0, [pc, #76]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000de2:	f001 f8b9 	bl	8001f58 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dec:	f000 f878 	bl	8000ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000dfe:	f001 fa4f 	bl	80022a0 <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e08:	f000 f86a 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_TIM2_Init+0x94>)
 8000e1a:	f001 fc17 	bl	800264c <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 f85c 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000078 	.word	0x20000078

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_GPIO_Init+0xa0>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|AMBER_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000e7e:	4816      	ldr	r0, [pc, #88]	; (8000ed8 <MX_GPIO_Init+0xa4>)
 8000e80:	f000 fc51 	bl	8001726 <HAL_GPIO_WritePin>
                          |AMBER_2_Pin|GREEN_2_Pin|EN_0_Pin|EN_1_Pin
                          |EN_2_Pin|EN_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000e84:	2200      	movs	r2, #0
 8000e86:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000e8a:	4814      	ldr	r0, [pc, #80]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000e8c:	f000 fc4b 	bl	8001726 <HAL_GPIO_WritePin>
                          |BTN_1_Pin|BTN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_1_Pin AMBER_1_Pin GREEN_1_Pin RED_2_Pin
                           AMBER_2_Pin GREEN_2_Pin EN_0_Pin EN_1_Pin
                           EN_2_Pin EN_3_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|AMBER_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000e90:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000e94:	60bb      	str	r3, [r7, #8]
                          |AMBER_2_Pin|GREEN_2_Pin|EN_0_Pin|EN_1_Pin
                          |EN_2_Pin|EN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <MX_GPIO_Init+0xa4>)
 8000eaa:	f000 faab 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin BTN_0_Pin
                           BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000eae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000eb2:	60bb      	str	r3, [r7, #8]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|BTN_0_Pin
                          |BTN_1_Pin|BTN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_GPIO_Init+0xa8>)
 8000ec8:	f000 fa9c 	bl	8001404 <HAL_GPIO_Init>

}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	40010c00 	.word	0x40010c00

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <Error_Handler+0x8>
	...

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_MspInit+0x5c>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <HAL_MspInit+0x5c>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6193      	str	r3, [r2, #24]
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_MspInit+0x5c>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_MspInit+0x5c>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <HAL_MspInit+0x5c>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	61d3      	str	r3, [r2, #28]
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_MspInit+0x5c>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_MspInit+0x60>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_MspInit+0x60>)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010000 	.word	0x40010000

08000f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d113      	bne.n	8000f8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_TIM_Base_MspInit+0x44>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_TIM_Base_MspInit+0x44>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_TIM_Base_MspInit+0x44>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	201c      	movs	r0, #28
 8000f80:	f000 fa09 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f84:	201c      	movs	r0, #28
 8000f86:	f000 fa22 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fde:	f000 f8e7 	bl	80011b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <TIM2_IRQHandler+0x10>)
 8000fee:	f001 f84f 	bl	8002090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000078 	.word	0x20000078

08000ffc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <set_timer>:

static uint16_t counter_buf[NUM_OF_TIMERS];
bool b_flag_buf[NUM_OF_TIMERS];

void set_timer(timer_name_t tmr, uint16_t duration)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	460a      	mov	r2, r1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	4613      	mov	r3, r2
 8001016:	80bb      	strh	r3, [r7, #4]
	if (tmr >= NUM_OF_TIMERS) return;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b04      	cmp	r3, #4
 800101c:	d80e      	bhi.n	800103c <set_timer+0x34>
	counter_buf[tmr] = duration / TIMER_INTERRUPT;
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	88ba      	ldrh	r2, [r7, #4]
 8001022:	4909      	ldr	r1, [pc, #36]	; (8001048 <set_timer+0x40>)
 8001024:	fba1 1202 	umull	r1, r2, r1, r2
 8001028:	08d2      	lsrs	r2, r2, #3
 800102a:	b291      	uxth	r1, r2
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <set_timer+0x44>)
 800102e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	b_flag_buf[tmr] = false;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <set_timer+0x48>)
 8001036:	2100      	movs	r1, #0
 8001038:	54d1      	strb	r1, [r2, r3]
 800103a:	e000      	b.n	800103e <set_timer+0x36>
	if (tmr >= NUM_OF_TIMERS) return;
 800103c:	bf00      	nop
}
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	cccccccd 	.word	0xcccccccd
 800104c:	2000006c 	.word	0x2000006c
 8001050:	200000c0 	.word	0x200000c0

08001054 <run_timer>:

static void run_timer(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
	for (timer_name_t tmr = TMR_TRAFFIC_LIGHT_1; tmr < NUM_OF_TIMERS; tmr++)
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	e01b      	b.n	8001098 <run_timer+0x44>
	{
		if (counter_buf[tmr] > 0)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <run_timer+0x58>)
 8001064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d012      	beq.n	8001092 <run_timer+0x3e>
		{
			counter_buf[tmr]--;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <run_timer+0x58>)
 8001070:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001074:	3a01      	subs	r2, #1
 8001076:	b291      	uxth	r1, r2
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <run_timer+0x58>)
 800107a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(counter_buf[tmr] == 0) b_flag_buf[tmr] = true;
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <run_timer+0x58>)
 8001082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <run_timer+0x3e>
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <run_timer+0x5c>)
 800108e:	2101      	movs	r1, #1
 8001090:	54d1      	strb	r1, [r2, r3]
	for (timer_name_t tmr = TMR_TRAFFIC_LIGHT_1; tmr < NUM_OF_TIMERS; tmr++)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	3301      	adds	r3, #1
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b04      	cmp	r3, #4
 800109c:	d9e0      	bls.n	8001060 <run_timer+0xc>
		}
	}
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000006c 	.word	0x2000006c
 80010b0:	200000c0 	.word	0x200000c0

080010b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c4:	d103      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		button_reading();
 80010c6:	f7ff f86b 	bl	80001a0 <button_reading>
		run_timer();
 80010ca:	f7ff ffc3 	bl	8001054 <run_timer>
	}
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	; (8001110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	; (800111c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010fe:	f7ff ff7d 	bl	8000ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f001 fb0d 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001106:	f7ff fdf1 	bl	8000cec <main>
  bx lr
 800110a:	4770      	bx	lr
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001114:	080027b8 	.word	0x080027b8
  ldr r2, =_sbss
 8001118:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800111c:	200000cc 	.word	0x200000cc

08001120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_2_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_Init+0x28>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_Init+0x28>)
 800112e:	f043 0310 	orr.w	r3, r3, #16
 8001132:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f923 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113a:	200f      	movs	r0, #15
 800113c:	f000 f808 	bl	8001150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001140:	f7ff fed4 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40022000 	.word	0x40022000

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x54>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x58>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	fbb3 f3f1 	udiv	r3, r3, r1
 800116a:	fbb2 f3f3 	udiv	r3, r2, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f93b 	bl	80013ea <HAL_SYSTICK_Config>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e00e      	b.n	800119c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d80a      	bhi.n	800119a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f000 f903 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001190:	4a06      	ldr	r2, [pc, #24]	; (80011ac <HAL_InitTick+0x5c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e000      	b.n	800119c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000000c 	.word	0x2000000c
 80011a8:	20000014 	.word	0x20000014
 80011ac:	20000010 	.word	0x20000010

080011b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x1c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x20>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <HAL_IncTick+0x20>)
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	20000014 	.word	0x20000014
 80011d0:	200000c8 	.word	0x200000c8

080011d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b02      	ldr	r3, [pc, #8]	; (80011e4 <HAL_GetTick+0x10>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	200000c8 	.word	0x200000c8

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4906      	ldr	r1, [pc, #24]	; (8001280 <__NVIC_EnableIRQ+0x34>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff90 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff2d 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff42 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff90 	bl	80012d8 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5f 	bl	8001284 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff35 	bl	800124c <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b08b      	sub	sp, #44	; 0x2c
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	e148      	b.n	80016aa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001418:	2201      	movs	r2, #1
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	429a      	cmp	r2, r3
 8001432:	f040 8137 	bne.w	80016a4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4aa3      	ldr	r2, [pc, #652]	; (80016c8 <HAL_GPIO_Init+0x2c4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d05e      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001440:	4aa1      	ldr	r2, [pc, #644]	; (80016c8 <HAL_GPIO_Init+0x2c4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d875      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001446:	4aa1      	ldr	r2, [pc, #644]	; (80016cc <HAL_GPIO_Init+0x2c8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d058      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 800144c:	4a9f      	ldr	r2, [pc, #636]	; (80016cc <HAL_GPIO_Init+0x2c8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d86f      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001452:	4a9f      	ldr	r2, [pc, #636]	; (80016d0 <HAL_GPIO_Init+0x2cc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d052      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001458:	4a9d      	ldr	r2, [pc, #628]	; (80016d0 <HAL_GPIO_Init+0x2cc>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d869      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800145e:	4a9d      	ldr	r2, [pc, #628]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d04c      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001464:	4a9b      	ldr	r2, [pc, #620]	; (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d863      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800146a:	4a9b      	ldr	r2, [pc, #620]	; (80016d8 <HAL_GPIO_Init+0x2d4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d046      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001470:	4a99      	ldr	r2, [pc, #612]	; (80016d8 <HAL_GPIO_Init+0x2d4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d85d      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001476:	2b12      	cmp	r3, #18
 8001478:	d82a      	bhi.n	80014d0 <HAL_GPIO_Init+0xcc>
 800147a:	2b12      	cmp	r3, #18
 800147c:	d859      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <HAL_GPIO_Init+0x80>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	080014ff 	.word	0x080014ff
 8001488:	080014d9 	.word	0x080014d9
 800148c:	080014eb 	.word	0x080014eb
 8001490:	0800152d 	.word	0x0800152d
 8001494:	08001533 	.word	0x08001533
 8001498:	08001533 	.word	0x08001533
 800149c:	08001533 	.word	0x08001533
 80014a0:	08001533 	.word	0x08001533
 80014a4:	08001533 	.word	0x08001533
 80014a8:	08001533 	.word	0x08001533
 80014ac:	08001533 	.word	0x08001533
 80014b0:	08001533 	.word	0x08001533
 80014b4:	08001533 	.word	0x08001533
 80014b8:	08001533 	.word	0x08001533
 80014bc:	08001533 	.word	0x08001533
 80014c0:	08001533 	.word	0x08001533
 80014c4:	08001533 	.word	0x08001533
 80014c8:	080014e1 	.word	0x080014e1
 80014cc:	080014f5 	.word	0x080014f5
 80014d0:	4a82      	ldr	r2, [pc, #520]	; (80016dc <HAL_GPIO_Init+0x2d8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014d6:	e02c      	b.n	8001532 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	623b      	str	r3, [r7, #32]
          break;
 80014de:	e029      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	3304      	adds	r3, #4
 80014e6:	623b      	str	r3, [r7, #32]
          break;
 80014e8:	e024      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	3308      	adds	r3, #8
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e01f      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	330c      	adds	r3, #12
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e01a      	b.n	8001534 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001506:	2304      	movs	r3, #4
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e013      	b.n	8001534 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001514:	2308      	movs	r3, #8
 8001516:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	611a      	str	r2, [r3, #16]
          break;
 800151e:	e009      	b.n	8001534 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001520:	2308      	movs	r3, #8
 8001522:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	615a      	str	r2, [r3, #20]
          break;
 800152a:	e003      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x130>
          break;
 8001532:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2bff      	cmp	r3, #255	; 0xff
 8001538:	d801      	bhi.n	800153e <HAL_GPIO_Init+0x13a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_Init+0x13e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3304      	adds	r3, #4
 8001542:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2bff      	cmp	r3, #255	; 0xff
 8001548:	d802      	bhi.n	8001550 <HAL_GPIO_Init+0x14c>
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x152>
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	3b08      	subs	r3, #8
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	210f      	movs	r1, #15
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	6a39      	ldr	r1, [r7, #32]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	431a      	orrs	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8090 	beq.w	80016a4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001584:	4b56      	ldr	r3, [pc, #344]	; (80016e0 <HAL_GPIO_Init+0x2dc>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a55      	ldr	r2, [pc, #340]	; (80016e0 <HAL_GPIO_Init+0x2dc>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <HAL_GPIO_Init+0x2dc>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800159c:	4a51      	ldr	r2, [pc, #324]	; (80016e4 <HAL_GPIO_Init+0x2e0>)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <HAL_GPIO_Init+0x2e4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d00d      	beq.n	80015e4 <HAL_GPIO_Init+0x1e0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a48      	ldr	r2, [pc, #288]	; (80016ec <HAL_GPIO_Init+0x2e8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d007      	beq.n	80015e0 <HAL_GPIO_Init+0x1dc>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <HAL_GPIO_Init+0x2ec>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d101      	bne.n	80015dc <HAL_GPIO_Init+0x1d8>
 80015d8:	2302      	movs	r3, #2
 80015da:	e004      	b.n	80015e6 <HAL_GPIO_Init+0x1e2>
 80015dc:	2303      	movs	r3, #3
 80015de:	e002      	b.n	80015e6 <HAL_GPIO_Init+0x1e2>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_GPIO_Init+0x1e2>
 80015e4:	2300      	movs	r3, #0
 80015e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e8:	f002 0203 	and.w	r2, r2, #3
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	4093      	lsls	r3, r2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015f6:	493b      	ldr	r1, [pc, #236]	; (80016e4 <HAL_GPIO_Init+0x2e0>)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001610:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4937      	ldr	r1, [pc, #220]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161e:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4933      	ldr	r1, [pc, #204]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001628:	4013      	ands	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	492d      	ldr	r1, [pc, #180]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	4929      	ldr	r1, [pc, #164]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001650:	4013      	ands	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4923      	ldr	r1, [pc, #140]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	43db      	mvns	r3, r3
 8001676:	491f      	ldr	r1, [pc, #124]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001678:	4013      	ands	r3, r2
 800167a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	4919      	ldr	r1, [pc, #100]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	60cb      	str	r3, [r1, #12]
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	43db      	mvns	r3, r3
 800169e:	4915      	ldr	r1, [pc, #84]	; (80016f4 <HAL_GPIO_Init+0x2f0>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	3301      	adds	r3, #1
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f47f aeaf 	bne.w	8001418 <HAL_GPIO_Init+0x14>
  }
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	372c      	adds	r7, #44	; 0x2c
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	10320000 	.word	0x10320000
 80016cc:	10310000 	.word	0x10310000
 80016d0:	10220000 	.word	0x10220000
 80016d4:	10210000 	.word	0x10210000
 80016d8:	10120000 	.word	0x10120000
 80016dc:	10110000 	.word	0x10110000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40010c00 	.word	0x40010c00
 80016f0:	40011000 	.word	0x40011000
 80016f4:	40010400 	.word	0x40010400

080016f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e001      	b.n	800171a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	807b      	strh	r3, [r7, #2]
 8001732:	4613      	mov	r3, r2
 8001734:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001736:	787b      	ldrb	r3, [r7, #1]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173c:	887a      	ldrh	r2, [r7, #2]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001742:	e003      	b.n	800174c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	041a      	lsls	r2, r3, #16
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	611a      	str	r2, [r3, #16]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001756:	b480      	push	{r7}
 8001758:	b085      	sub	sp, #20
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001768:	887a      	ldrh	r2, [r7, #2]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	041a      	lsls	r2, r3, #16
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43d9      	mvns	r1, r3
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	400b      	ands	r3, r1
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e26c      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8087 	beq.w	80018b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a8:	4b92      	ldr	r3, [pc, #584]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d00c      	beq.n	80017ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b4:	4b8f      	ldr	r3, [pc, #572]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d112      	bne.n	80017e6 <HAL_RCC_OscConfig+0x5e>
 80017c0:	4b8c      	ldr	r3, [pc, #560]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017cc:	d10b      	bne.n	80017e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d06c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x12c>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d168      	bne.n	80018b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e246      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x76>
 80017f0:	4b80      	ldr	r3, [pc, #512]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a7f      	ldr	r2, [pc, #508]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e02e      	b.n	800185c <HAL_RCC_OscConfig+0xd4>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x98>
 8001806:	4b7b      	ldr	r3, [pc, #492]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7a      	ldr	r2, [pc, #488]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b78      	ldr	r3, [pc, #480]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a77      	ldr	r2, [pc, #476]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xd4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0xbc>
 800182a:	4b72      	ldr	r3, [pc, #456]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a71      	ldr	r2, [pc, #452]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b6f      	ldr	r3, [pc, #444]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6e      	ldr	r2, [pc, #440]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xd4>
 8001844:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6a      	ldr	r2, [pc, #424]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a67      	ldr	r2, [pc, #412]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fcb6 	bl	80011d4 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fcb2 	bl	80011d4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1fa      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b5d      	ldr	r3, [pc, #372]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xe4>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fca2 	bl	80011d4 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fc9e 	bl	80011d4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1e6      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x10c>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d063      	beq.n	800198a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c2:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x18c>
 80018da:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x176>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1ba      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4939      	ldr	r1, [pc, #228]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e03a      	b.n	800198a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff fc57 	bl	80011d4 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff fc53 	bl	80011d4 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e19b      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4927      	ldr	r1, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e015      	b.n	800198a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fc36 	bl	80011d4 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff fc32 	bl	80011d4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e17a      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d03a      	beq.n	8001a0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d019      	beq.n	80019d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_RCC_OscConfig+0x274>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a4:	f7ff fc16 	bl	80011d4 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff fc12 	bl	80011d4 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e15a      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f000 faa6 	bl	8001f1c <RCC_Delay>
 80019d0:	e01c      	b.n	8001a0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_RCC_OscConfig+0x274>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fbfc 	bl	80011d4 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019de:	e00f      	b.n	8001a00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff fbf8 	bl	80011d4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d908      	bls.n	8001a00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e140      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	42420000 	.word	0x42420000
 80019fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	4b9e      	ldr	r3, [pc, #632]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e9      	bne.n	80019e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80a6 	beq.w	8001b66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1e:	4b97      	ldr	r3, [pc, #604]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10d      	bne.n	8001a46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b94      	ldr	r3, [pc, #592]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a93      	ldr	r2, [pc, #588]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b91      	ldr	r3, [pc, #580]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a42:	2301      	movs	r3, #1
 8001a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a46:	4b8e      	ldr	r3, [pc, #568]	; (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d118      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a52:	4b8b      	ldr	r3, [pc, #556]	; (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a8a      	ldr	r2, [pc, #552]	; (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fbb9 	bl	80011d4 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a66:	f7ff fbb5 	bl	80011d4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b64      	cmp	r3, #100	; 0x64
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0fd      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b81      	ldr	r3, [pc, #516]	; (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x312>
 8001a8c:	4b7b      	ldr	r3, [pc, #492]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a7a      	ldr	r2, [pc, #488]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	e02d      	b.n	8001af6 <HAL_RCC_OscConfig+0x36e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x334>
 8001aa2:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6213      	str	r3, [r2, #32]
 8001aae:	4b73      	ldr	r3, [pc, #460]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a72      	ldr	r2, [pc, #456]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	6213      	str	r3, [r2, #32]
 8001aba:	e01c      	b.n	8001af6 <HAL_RCC_OscConfig+0x36e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x356>
 8001ac4:	4b6d      	ldr	r3, [pc, #436]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a6c      	ldr	r2, [pc, #432]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a69      	ldr	r2, [pc, #420]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0x36e>
 8001ade:	4b67      	ldr	r3, [pc, #412]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a66      	ldr	r2, [pc, #408]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6213      	str	r3, [r2, #32]
 8001aea:	4b64      	ldr	r3, [pc, #400]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a63      	ldr	r2, [pc, #396]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	f023 0304 	bic.w	r3, r3, #4
 8001af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d015      	beq.n	8001b2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fb69 	bl	80011d4 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff fb65 	bl	80011d4 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e0ab      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ee      	beq.n	8001b06 <HAL_RCC_OscConfig+0x37e>
 8001b28:	e014      	b.n	8001b54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fb53 	bl	80011d4 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7ff fb4f 	bl	80011d4 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e095      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ee      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d105      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5a:	4b48      	ldr	r3, [pc, #288]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a47      	ldr	r2, [pc, #284]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8081 	beq.w	8001c72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b70:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d061      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d146      	bne.n	8001c12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_RCC_OscConfig+0x4fc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fb23 	bl	80011d4 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b92:	f7ff fb1f 	bl	80011d4 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e067      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d108      	bne.n	8001bcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	492d      	ldr	r1, [pc, #180]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a19      	ldr	r1, [r3, #32]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	4927      	ldr	r1, [pc, #156]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_RCC_OscConfig+0x4fc>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff faf3 	bl	80011d4 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7ff faef 	bl	80011d4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e037      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x46a>
 8001c10:	e02f      	b.n	8001c72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_RCC_OscConfig+0x4fc>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fadc 	bl	80011d4 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff fad8 	bl	80011d4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e020      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x498>
 8001c3e:	e018      	b.n	8001c72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e013      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40007000 	.word	0x40007000
 8001c84:	42420060 	.word	0x42420060

08001c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0d0      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d910      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 0207 	bic.w	r2, r3, #7
 8001cb2:	4965      	ldr	r1, [pc, #404]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b8      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b50      	ldr	r3, [pc, #320]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	494d      	ldr	r1, [pc, #308]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d040      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d115      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e07f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e073      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e06b      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f023 0203 	bic.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4936      	ldr	r1, [pc, #216]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d78:	f7ff fa2c 	bl	80011d4 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d80:	f7ff fa28 	bl	80011d4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e053      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 020c 	and.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1eb      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d210      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4922      	ldr	r1, [pc, #136]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e032      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4916      	ldr	r1, [pc, #88]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	490e      	ldr	r1, [pc, #56]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e16:	f000 f821 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	490a      	ldr	r1, [pc, #40]	; (8001e50 <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1cc>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1d0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f98a 	bl	8001150 <HAL_InitTick>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	080027a0 	.word	0x080027a0
 8001e54:	2000000c 	.word	0x2000000c
 8001e58:	20000010 	.word	0x20000010

08001e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b490      	push	{r4, r7}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e64:	1d3c      	adds	r4, r7, #4
 8001e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e6c:	f240 2301 	movw	r3, #513	; 0x201
 8001e70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d002      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x40>
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x46>
 8001e9a:	e02d      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9e:	623b      	str	r3, [r7, #32]
      break;
 8001ea0:	e02d      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	0c9b      	lsrs	r3, r3, #18
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eae:	4413      	add	r3, r2
 8001eb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eb4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	0c5b      	lsrs	r3, r3, #17
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ece:	4413      	add	r3, r2
 8001ed0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ed4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eda:	fb02 f203 	mul.w	r2, r2, r3
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	e004      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eec:	fb02 f303 	mul.w	r3, r2, r3
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	623b      	str	r3, [r7, #32]
      break;
 8001ef6:	e002      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efa:	623b      	str	r3, [r7, #32]
      break;
 8001efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efe:	6a3b      	ldr	r3, [r7, #32]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc90      	pop	{r4, r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	08002790 	.word	0x08002790
 8001f10:	40021000 	.word	0x40021000
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	003d0900 	.word	0x003d0900

08001f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <RCC_Delay+0x34>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <RCC_Delay+0x38>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0a5b      	lsrs	r3, r3, #9
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f38:	bf00      	nop
  }
  while (Delay --);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e5a      	subs	r2, r3, #1
 8001f3e:	60fa      	str	r2, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f9      	bne.n	8001f38 <RCC_Delay+0x1c>
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	2000000c 	.word	0x2000000c
 8001f54:	10624dd3 	.word	0x10624dd3

08001f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e041      	b.n	8001fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe ffe6 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3304      	adds	r3, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f000 fa6a 	bl	8002470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d001      	beq.n	8002010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e035      	b.n	800207c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_TIM_Base_Start_IT+0x90>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d009      	beq.n	8002046 <HAL_TIM_Base_Start_IT+0x4e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203a:	d004      	beq.n	8002046 <HAL_TIM_Base_Start_IT+0x4e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_TIM_Base_Start_IT+0x94>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d111      	bne.n	800206a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b06      	cmp	r3, #6
 8002056:	d010      	beq.n	800207a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002068:	e007      	b.n	800207a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40000400 	.word	0x40000400

08002090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d122      	bne.n	80020ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d11b      	bne.n	80020ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0202 	mvn.w	r2, #2
 80020bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f9b1 	bl	800243a <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f9a4 	bl	8002428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f9b3 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d122      	bne.n	8002140 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b04      	cmp	r3, #4
 8002106:	d11b      	bne.n	8002140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0204 	mvn.w	r2, #4
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f987 	bl	800243a <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f97a 	bl	8002428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f989 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b08      	cmp	r3, #8
 800214c:	d122      	bne.n	8002194 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b08      	cmp	r3, #8
 800215a:	d11b      	bne.n	8002194 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0208 	mvn.w	r2, #8
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2204      	movs	r2, #4
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f95d 	bl	800243a <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f950 	bl	8002428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f95f 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b10      	cmp	r3, #16
 80021a0:	d122      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d11b      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0210 	mvn.w	r2, #16
 80021b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2208      	movs	r2, #8
 80021be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f933 	bl	800243a <HAL_TIM_IC_CaptureCallback>
 80021d4:	e005      	b.n	80021e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f926 	bl	8002428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f935 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d107      	bne.n	8002214 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0201 	mvn.w	r2, #1
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe ff50 	bl	80010b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221e:	2b80      	cmp	r3, #128	; 0x80
 8002220:	d10e      	bne.n	8002240 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	2b80      	cmp	r3, #128	; 0x80
 800222e:	d107      	bne.n	8002240 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa67 	bl	800270e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224a:	2b40      	cmp	r3, #64	; 0x40
 800224c:	d10e      	bne.n	800226c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b40      	cmp	r3, #64	; 0x40
 800225a:	d107      	bne.n	800226c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f8f9 	bl	800245e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b20      	cmp	r3, #32
 8002278:	d10e      	bne.n	8002298 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b20      	cmp	r3, #32
 8002286:	d107      	bne.n	8002298 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0220 	mvn.w	r2, #32
 8002290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fa32 	bl	80026fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_TIM_ConfigClockSource+0x18>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0b3      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x180>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f0:	d03e      	beq.n	8002370 <HAL_TIM_ConfigClockSource+0xd0>
 80022f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f6:	f200 8087 	bhi.w	8002408 <HAL_TIM_ConfigClockSource+0x168>
 80022fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fe:	f000 8085 	beq.w	800240c <HAL_TIM_ConfigClockSource+0x16c>
 8002302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002306:	d87f      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x168>
 8002308:	2b70      	cmp	r3, #112	; 0x70
 800230a:	d01a      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0xa2>
 800230c:	2b70      	cmp	r3, #112	; 0x70
 800230e:	d87b      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x168>
 8002310:	2b60      	cmp	r3, #96	; 0x60
 8002312:	d050      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x116>
 8002314:	2b60      	cmp	r3, #96	; 0x60
 8002316:	d877      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x168>
 8002318:	2b50      	cmp	r3, #80	; 0x50
 800231a:	d03c      	beq.n	8002396 <HAL_TIM_ConfigClockSource+0xf6>
 800231c:	2b50      	cmp	r3, #80	; 0x50
 800231e:	d873      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x168>
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	d058      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0x136>
 8002324:	2b40      	cmp	r3, #64	; 0x40
 8002326:	d86f      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x168>
 8002328:	2b30      	cmp	r3, #48	; 0x30
 800232a:	d064      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x156>
 800232c:	2b30      	cmp	r3, #48	; 0x30
 800232e:	d86b      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x168>
 8002330:	2b20      	cmp	r3, #32
 8002332:	d060      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x156>
 8002334:	2b20      	cmp	r3, #32
 8002336:	d867      	bhi.n	8002408 <HAL_TIM_ConfigClockSource+0x168>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d05c      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x156>
 800233c:	2b10      	cmp	r3, #16
 800233e:	d05a      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002340:	e062      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6899      	ldr	r1, [r3, #8]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f000 f95c 	bl	800260e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002364:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	609a      	str	r2, [r3, #8]
      break;
 800236e:	e04e      	b.n	800240e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6899      	ldr	r1, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f000 f945 	bl	800260e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002392:	609a      	str	r2, [r3, #8]
      break;
 8002394:	e03b      	b.n	800240e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f000 f8bc 	bl	8002520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2150      	movs	r1, #80	; 0x50
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f913 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 80023b4:	e02b      	b.n	800240e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6859      	ldr	r1, [r3, #4]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	461a      	mov	r2, r3
 80023c4:	f000 f8da 	bl	800257c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2160      	movs	r1, #96	; 0x60
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 f903 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 80023d4:	e01b      	b.n	800240e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f000 f89c 	bl	8002520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2140      	movs	r1, #64	; 0x40
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f8f3 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 80023f4:	e00b      	b.n	800240e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f000 f8ea 	bl	80025da <TIM_ITRx_SetConfig>
        break;
 8002406:	e002      	b.n	800240e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002408:	bf00      	nop
 800240a:	e000      	b.n	800240e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800240c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a25      	ldr	r2, [pc, #148]	; (8002518 <TIM_Base_SetConfig+0xa8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d007      	beq.n	8002498 <TIM_Base_SetConfig+0x28>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248e:	d003      	beq.n	8002498 <TIM_Base_SetConfig+0x28>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a22      	ldr	r2, [pc, #136]	; (800251c <TIM_Base_SetConfig+0xac>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d108      	bne.n	80024aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <TIM_Base_SetConfig+0xa8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <TIM_Base_SetConfig+0x52>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d003      	beq.n	80024c2 <TIM_Base_SetConfig+0x52>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a17      	ldr	r2, [pc, #92]	; (800251c <TIM_Base_SetConfig+0xac>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d108      	bne.n	80024d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a07      	ldr	r2, [pc, #28]	; (8002518 <TIM_Base_SetConfig+0xa8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d103      	bne.n	8002508 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	615a      	str	r2, [r3, #20]
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40000400 	.word	0x40000400

08002520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f023 0201 	bic.w	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f023 030a 	bic.w	r3, r3, #10
 800255c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	621a      	str	r2, [r3, #32]
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f023 0210 	bic.w	r2, r3, #16
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	031b      	lsls	r3, r3, #12
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	621a      	str	r2, [r3, #32]
}
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025da:	b480      	push	{r7}
 80025dc:	b085      	sub	sp, #20
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f043 0307 	orr.w	r3, r3, #7
 80025fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	609a      	str	r2, [r3, #8]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800260e:	b480      	push	{r7}
 8002610:	b087      	sub	sp, #28
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002628:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	021a      	lsls	r2, r3, #8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	431a      	orrs	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4313      	orrs	r3, r2
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	609a      	str	r2, [r3, #8]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002660:	2302      	movs	r3, #2
 8002662:	e041      	b.n	80026e8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d004      	beq.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d10c      	bne.n	80026d6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40000400 	.word	0x40000400

080026fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	2600      	movs	r6, #0
 8002724:	4d0c      	ldr	r5, [pc, #48]	; (8002758 <__libc_init_array+0x38>)
 8002726:	4c0d      	ldr	r4, [pc, #52]	; (800275c <__libc_init_array+0x3c>)
 8002728:	1b64      	subs	r4, r4, r5
 800272a:	10a4      	asrs	r4, r4, #2
 800272c:	42a6      	cmp	r6, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	f000 f822 	bl	8002778 <_init>
 8002734:	2600      	movs	r6, #0
 8002736:	4d0a      	ldr	r5, [pc, #40]	; (8002760 <__libc_init_array+0x40>)
 8002738:	4c0a      	ldr	r4, [pc, #40]	; (8002764 <__libc_init_array+0x44>)
 800273a:	1b64      	subs	r4, r4, r5
 800273c:	10a4      	asrs	r4, r4, #2
 800273e:	42a6      	cmp	r6, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	f855 3b04 	ldr.w	r3, [r5], #4
 8002748:	4798      	blx	r3
 800274a:	3601      	adds	r6, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002752:	4798      	blx	r3
 8002754:	3601      	adds	r6, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	080027b0 	.word	0x080027b0
 800275c:	080027b0 	.word	0x080027b0
 8002760:	080027b0 	.word	0x080027b0
 8002764:	080027b4 	.word	0x080027b4

08002768 <memset>:
 8002768:	4603      	mov	r3, r0
 800276a:	4402      	add	r2, r0
 800276c:	4293      	cmp	r3, r2
 800276e:	d100      	bne.n	8002772 <memset+0xa>
 8002770:	4770      	bx	lr
 8002772:	f803 1b01 	strb.w	r1, [r3], #1
 8002776:	e7f9      	b.n	800276c <memset+0x4>

08002778 <_init>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr

08002784 <_fini>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	bf00      	nop
 8002788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278a:	bc08      	pop	{r3}
 800278c:	469e      	mov	lr, r3
 800278e:	4770      	bx	lr
